/**
 * Blockstream Esplora API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface InlineResponseDefault
 */
export interface InlineResponseDefault {
    /**
     * A list of transaction hashes the current hash is paired with, deepest pairing first.
     * @type {Array<string>}
     * @memberof InlineResponseDefault
     */
    merkle: Array<string>;
    /**
     * The height of the block the transaction was confirmed in.
     * @type {number}
     * @memberof InlineResponseDefault
     */
    block_height: number;
    /**
     * The 0-based index of the position of the transaction in the ordered list of transactions in the block.
     * @type {number}
     * @memberof InlineResponseDefault
     */
    pos: number;
}
/**
 *
 * @export
 * @interface InlineResponseDefault1
 */
export interface InlineResponseDefault1 {
    /**
     *
     * @type {string}
     * @memberof InlineResponseDefault1
     */
    address: string;
    /**
     *
     * @type {InlineResponseDefault1ChainStats}
     * @memberof InlineResponseDefault1
     */
    chain_stats: InlineResponseDefault1ChainStats;
    /**
     *
     * @type {InlineResponseDefault1ChainStats}
     * @memberof InlineResponseDefault1
     */
    mempool_stats: InlineResponseDefault1ChainStats;
}
/**
 *
 * @export
 * @interface InlineResponseDefault1ChainStats
 */
export interface InlineResponseDefault1ChainStats {
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault1ChainStats
     */
    funded_txo_count?: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault1ChainStats
     */
    funded_txo_sum?: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault1ChainStats
     */
    spent_txo_count?: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault1ChainStats
     */
    spent_txo_sum?: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault1ChainStats
     */
    tx_count?: number;
}
/**
 *
 * @export
 * @interface InlineResponseDefault2
 */
export interface InlineResponseDefault2 {
    /**
     *
     * @type {string}
     * @memberof InlineResponseDefault2
     */
    id: string;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault2
     */
    height: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault2
     */
    version: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault2
     */
    timestamp: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault2
     */
    bits: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault2
     */
    nonce: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponseDefault2
     */
    merkle_root: string;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault2
     */
    tx_count: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault2
     */
    size: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault2
     */
    weight: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponseDefault2
     */
    previousblockhash: string;
}
/**
 *
 * @export
 * @interface InlineResponseDefault3
 */
export interface InlineResponseDefault3 {
    /**
     *
     * @type {boolean}
     * @memberof InlineResponseDefault3
     */
    in_best_chain: boolean;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault3
     */
    height?: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponseDefault3
     */
    next_best?: string;
}
/**
 *
 * @export
 * @interface InlineResponseDefault4
 */
export interface InlineResponseDefault4 {
    /**
     *
     * @type {string}
     * @memberof InlineResponseDefault4
     */
    txid: string;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault4
     */
    fee: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault4
     */
    vsize: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponseDefault4
     */
    value: number;
}
/**
 *
 * @export
 * @interface Mempool
 */
export interface Mempool {
    /**
     *
     * @type {number}
     * @memberof Mempool
     */
    count: number;
    /**
     *
     * @type {number}
     * @memberof Mempool
     */
    vsize: number;
    /**
     *
     * @type {number}
     * @memberof Mempool
     */
    total_fee: number;
    /**
     *
     * @type {Array<Array<number>>}
     * @memberof Mempool
     */
    fee_histogram: Array<Array<number>>;
}
/**
 *
 * @export
 * @interface Spend
 */
export interface Spend {
    /**
     *
     * @type {boolean}
     * @memberof Spend
     */
    spent: boolean;
    /**
     *
     * @type {string}
     * @memberof Spend
     */
    txid?: string;
    /**
     *
     * @type {string}
     * @memberof Spend
     */
    vin?: string;
    /**
     *
     * @type {Status}
     * @memberof Spend
     */
    status?: Status;
}
/**
 *
 * @export
 * @interface Status
 */
export interface Status {
    /**
     *
     * @type {boolean}
     * @memberof Status
     */
    confirmed: boolean;
    /**
     *
     * @type {number}
     * @memberof Status
     */
    block_height?: number;
    /**
     *
     * @type {string}
     * @memberof Status
     */
    block_hash?: string;
    /**
     *
     * @type {number}
     * @memberof Status
     */
    block_time?: number;
}
/**
 *
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    txid: string;
    /**
     *
     * @type {number}
     * @memberof Transaction
     */
    version: number;
    /**
     *
     * @type {number}
     * @memberof Transaction
     */
    locktime?: number;
    /**
     *
     * @type {Array<VIn>}
     * @memberof Transaction
     */
    vin?: Array<VIn>;
    /**
     *
     * @type {Array<VOut>}
     * @memberof Transaction
     */
    vout?: Array<VOut>;
    /**
     *
     * @type {number}
     * @memberof Transaction
     */
    size?: number;
    /**
     *
     * @type {number}
     * @memberof Transaction
     */
    weight?: number;
    /**
     *
     * @type {number}
     * @memberof Transaction
     */
    fee?: number;
    /**
     *
     * @type {Status}
     * @memberof Transaction
     */
    status?: Status;
}
/**
 *
 * @export
 * @interface UTXO
 */
export interface UTXO {
    /**
     *
     * @type {string}
     * @memberof UTXO
     */
    txid: string;
    /**
     *
     * @type {number}
     * @memberof UTXO
     */
    vout: number;
    /**
     *
     * @type {number}
     * @memberof UTXO
     */
    value: number;
    /**
     *
     * @type {Status}
     * @memberof UTXO
     */
    status?: Status;
}
/**
 *
 * @export
 * @interface VIn
 */
export interface VIn {
    /**
     *
     * @type {string}
     * @memberof VIn
     */
    txid?: string;
    /**
     *
     * @type {number}
     * @memberof VIn
     */
    vout?: number;
    /**
     *
     * @type {boolean}
     * @memberof VIn
     */
    is_coinbase?: boolean;
    /**
     *
     * @type {string}
     * @memberof VIn
     */
    scriptsig?: string;
    /**
     *
     * @type {string}
     * @memberof VIn
     */
    scriptsig_asm?: string;
    /**
     *
     * @type {string}
     * @memberof VIn
     */
    inner_redeemscript_asm?: string;
    /**
     *
     * @type {string}
     * @memberof VIn
     */
    inner_witnessscript_asm?: string;
    /**
     *
     * @type {number}
     * @memberof VIn
     */
    sequence?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof VIn
     */
    witness?: Array<string>;
    /**
     *
     * @type {VOut}
     * @memberof VIn
     */
    prevout?: VOut;
}
/**
 *
 * @export
 * @interface VOut
 */
export interface VOut {
    /**
     *
     * @type {string}
     * @memberof VOut
     */
    scriptpubkey?: string;
    /**
     *
     * @type {string}
     * @memberof VOut
     */
    scriptpubkey_asm?: string;
    /**
     *
     * @type {string}
     * @memberof VOut
     */
    scriptpubkey_type?: string;
    /**
     *
     * @type {string}
     * @memberof VOut
     */
    scriptpubkey_address?: string;
    /**
     *
     * @type {number}
     * @memberof VOut
     */
    value?: number;
}
/**
 * AddressApi - axios parameter creator
 * @export
 */
export declare const AddressApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get information about an address.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddress: (address: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get transaction history for the specified address, sorted with newest first.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddressTxHistory: (address: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get unconfirmed transaction history for the specified address.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddressTxMempool: (address: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the list of unspent transaction outputs associated with the address.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddressUtxo: (address: string, options?: any) => Promise<RequestArgs>;
};
/**
 * AddressApi - functional programming interface
 * @export
 */
export declare const AddressApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get information about an address.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddress(address: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponseDefault1>>;
    /**
     *
     * @summary Get transaction history for the specified address, sorted with newest first.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddressTxHistory(address: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Transaction>>>;
    /**
     *
     * @summary Get unconfirmed transaction history for the specified address.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddressTxMempool(address: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Transaction>>>;
    /**
     *
     * @summary Get the list of unspent transaction outputs associated with the address.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddressUtxo(address: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<UTXO>>>;
};
/**
 * AddressApi - factory interface
 * @export
 */
export declare const AddressApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Get information about an address.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddress(address: string, options?: any): AxiosPromise<InlineResponseDefault1>;
    /**
     *
     * @summary Get transaction history for the specified address, sorted with newest first.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddressTxHistory(address: string, options?: any): AxiosPromise<Array<Transaction>>;
    /**
     *
     * @summary Get unconfirmed transaction history for the specified address.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddressTxMempool(address: string, options?: any): AxiosPromise<Array<Transaction>>;
    /**
     *
     * @summary Get the list of unspent transaction outputs associated with the address.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAddressUtxo(address: string, options?: any): AxiosPromise<Array<UTXO>>;
};
/**
 * AddressApi - object-oriented interface
 * @export
 * @class AddressApi
 * @extends {BaseAPI}
 */
export declare class AddressApi extends BaseAPI {
    /**
     *
     * @summary Get information about an address.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    getAddress(address: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponseDefault1>>;
    /**
     *
     * @summary Get transaction history for the specified address, sorted with newest first.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    getAddressTxHistory(address: string, options?: any): Promise<import("axios").AxiosResponse<Transaction[]>>;
    /**
     *
     * @summary Get unconfirmed transaction history for the specified address.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    getAddressTxMempool(address: string, options?: any): Promise<import("axios").AxiosResponse<Transaction[]>>;
    /**
     *
     * @summary Get the list of unspent transaction outputs associated with the address.
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    getAddressUtxo(address: string, options?: any): Promise<import("axios").AxiosResponse<UTXO[]>>;
}
/**
 * BlockApi - axios parameter creator
 * @export
 */
export declare const BlockApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Returns information about a block.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlock: (hash: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the hash of the block currently at height.
     * @param {number} height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockAtHeight: (height: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the raw block representation in binary.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockRaw: (hash: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the block status.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockStatus: (hash: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the transaction at index :index within the specified block.
     * @param {string} hash
     * @param {number} index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockTxByIndex: (hash: string, index: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a list of all txids in the block.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockTxids: (hash: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the hash of the last block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLastBlockHash: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the height of the last block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLastBlockHeight: (options?: any) => Promise<RequestArgs>;
};
/**
 * BlockApi - functional programming interface
 * @export
 */
export declare const BlockApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Returns information about a block.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlock(hash: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponseDefault2>>;
    /**
     *
     * @summary Returns the hash of the block currently at height.
     * @param {number} height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockAtHeight(height: number, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>>;
    /**
     *
     * @summary Returns the raw block representation in binary.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockRaw(hash: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     *
     * @summary Returns the block status.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockStatus(hash: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponseDefault3>>;
    /**
     *
     * @summary Returns the transaction at index :index within the specified block.
     * @param {string} hash
     * @param {number} index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockTxByIndex(hash: string, index: number, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>>;
    /**
     *
     * @summary Returns a list of all txids in the block.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockTxids(hash: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<string>>>;
    /**
     *
     * @summary Returns the hash of the last block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLastBlockHash(options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>>;
    /**
     *
     * @summary Returns the height of the last block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLastBlockHeight(options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<number>>;
};
/**
 * BlockApi - factory interface
 * @export
 */
export declare const BlockApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Returns information about a block.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlock(hash: string, options?: any): AxiosPromise<InlineResponseDefault2>;
    /**
     *
     * @summary Returns the hash of the block currently at height.
     * @param {number} height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockAtHeight(height: number, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Returns the raw block representation in binary.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockRaw(hash: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the block status.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockStatus(hash: string, options?: any): AxiosPromise<InlineResponseDefault3>;
    /**
     *
     * @summary Returns the transaction at index :index within the specified block.
     * @param {string} hash
     * @param {number} index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockTxByIndex(hash: string, index: number, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Returns a list of all txids in the block.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockTxids(hash: string, options?: any): AxiosPromise<Array<string>>;
    /**
     *
     * @summary Returns the hash of the last block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLastBlockHash(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Returns the height of the last block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLastBlockHeight(options?: any): AxiosPromise<number>;
};
/**
 * BlockApi - object-oriented interface
 * @export
 * @class BlockApi
 * @extends {BaseAPI}
 */
export declare class BlockApi extends BaseAPI {
    /**
     *
     * @summary Returns information about a block.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    getBlock(hash: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponseDefault2>>;
    /**
     *
     * @summary Returns the hash of the block currently at height.
     * @param {number} height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    getBlockAtHeight(height: number, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Returns the raw block representation in binary.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    getBlockRaw(hash: string, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     *
     * @summary Returns the block status.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    getBlockStatus(hash: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponseDefault3>>;
    /**
     *
     * @summary Returns the transaction at index :index within the specified block.
     * @param {string} hash
     * @param {number} index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    getBlockTxByIndex(hash: string, index: number, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Returns a list of all txids in the block.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    getBlockTxids(hash: string, options?: any): Promise<import("axios").AxiosResponse<string[]>>;
    /**
     *
     * @summary Returns the hash of the last block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    getLastBlockHash(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Returns the height of the last block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockApi
     */
    getLastBlockHeight(options?: any): Promise<import("axios").AxiosResponse<number>>;
}
/**
 * FeeEstimatesApi - axios parameter creator
 * @export
 */
export declare const FeeEstimatesApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get an object where the key is the confirmation target (in number of blocks) and the value is the estimated feerate (in sat/vB).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeeEstimates: (options?: any) => Promise<RequestArgs>;
};
/**
 * FeeEstimatesApi - functional programming interface
 * @export
 */
export declare const FeeEstimatesApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get an object where the key is the confirmation target (in number of blocks) and the value is the estimated feerate (in sat/vB).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeeEstimates(options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<number>>>;
};
/**
 * FeeEstimatesApi - factory interface
 * @export
 */
export declare const FeeEstimatesApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Get an object where the key is the confirmation target (in number of blocks) and the value is the estimated feerate (in sat/vB).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeeEstimates(options?: any): AxiosPromise<Array<number>>;
};
/**
 * FeeEstimatesApi - object-oriented interface
 * @export
 * @class FeeEstimatesApi
 * @extends {BaseAPI}
 */
export declare class FeeEstimatesApi extends BaseAPI {
    /**
     *
     * @summary Get an object where the key is the confirmation target (in number of blocks) and the value is the estimated feerate (in sat/vB).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeeEstimatesApi
     */
    getFeeEstimates(options?: any): Promise<import("axios").AxiosResponse<number[]>>;
}
/**
 * MempoolApi - axios parameter creator
 * @export
 */
export declare const MempoolApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get mempool backlog statistics.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMempool: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a list of the last 10 transactions to enter the mempool.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMempoolRecent: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the full list of txids in the mempool as an array.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMempoolTxids: (options?: any) => Promise<RequestArgs>;
};
/**
 * MempoolApi - functional programming interface
 * @export
 */
export declare const MempoolApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get mempool backlog statistics.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMempool(options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Mempool>>;
    /**
     *
     * @summary Get a list of the last 10 transactions to enter the mempool.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMempoolRecent(options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<InlineResponseDefault4>>>;
    /**
     *
     * @summary Get the full list of txids in the mempool as an array.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMempoolTxids(options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<string>>>;
};
/**
 * MempoolApi - factory interface
 * @export
 */
export declare const MempoolApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Get mempool backlog statistics.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMempool(options?: any): AxiosPromise<Mempool>;
    /**
     *
     * @summary Get a list of the last 10 transactions to enter the mempool.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMempoolRecent(options?: any): AxiosPromise<Array<InlineResponseDefault4>>;
    /**
     *
     * @summary Get the full list of txids in the mempool as an array.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMempoolTxids(options?: any): AxiosPromise<Array<string>>;
};
/**
 * MempoolApi - object-oriented interface
 * @export
 * @class MempoolApi
 * @extends {BaseAPI}
 */
export declare class MempoolApi extends BaseAPI {
    /**
     *
     * @summary Get mempool backlog statistics.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MempoolApi
     */
    getMempool(options?: any): Promise<import("axios").AxiosResponse<Mempool>>;
    /**
     *
     * @summary Get a list of the last 10 transactions to enter the mempool.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MempoolApi
     */
    getMempoolRecent(options?: any): Promise<import("axios").AxiosResponse<InlineResponseDefault4[]>>;
    /**
     *
     * @summary Get the full list of txids in the mempool as an array.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MempoolApi
     */
    getMempoolTxids(options?: any): Promise<import("axios").AxiosResponse<string[]>>;
}
/**
 * ScripthashApi - axios parameter creator
 * @export
 */
export declare const ScripthashApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get confirmed transaction history for the specified address/scripthash, sorted by newest first.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentTxsByScripthash: (hash: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get confirmed transaction history for the specified address/scripthash, sorted by newest first.
     * @param {string} hash
     * @param {string} lastSeenTxid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxsBeforeTxidByScripthash: (hash: string, lastSeenTxid: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get transaction history for the specified address/scripthash, sorted with newest first. Can be used to query by op_return
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxsByScripthash: (hash: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ScripthashApi - functional programming interface
 * @export
 */
export declare const ScripthashApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get confirmed transaction history for the specified address/scripthash, sorted by newest first.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentTxsByScripthash(hash: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Transaction>>>;
    /**
     *
     * @summary Get confirmed transaction history for the specified address/scripthash, sorted by newest first.
     * @param {string} hash
     * @param {string} lastSeenTxid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxsBeforeTxidByScripthash(hash: string, lastSeenTxid: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Transaction>>>;
    /**
     *
     * @summary Get transaction history for the specified address/scripthash, sorted with newest first. Can be used to query by op_return
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxsByScripthash(hash: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Transaction>>>;
};
/**
 * ScripthashApi - factory interface
 * @export
 */
export declare const ScripthashApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Get confirmed transaction history for the specified address/scripthash, sorted by newest first.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentTxsByScripthash(hash: string, options?: any): AxiosPromise<Array<Transaction>>;
    /**
     *
     * @summary Get confirmed transaction history for the specified address/scripthash, sorted by newest first.
     * @param {string} hash
     * @param {string} lastSeenTxid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxsBeforeTxidByScripthash(hash: string, lastSeenTxid: string, options?: any): AxiosPromise<Array<Transaction>>;
    /**
     *
     * @summary Get transaction history for the specified address/scripthash, sorted with newest first. Can be used to query by op_return
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxsByScripthash(hash: string, options?: any): AxiosPromise<Array<Transaction>>;
};
/**
 * ScripthashApi - object-oriented interface
 * @export
 * @class ScripthashApi
 * @extends {BaseAPI}
 */
export declare class ScripthashApi extends BaseAPI {
    /**
     *
     * @summary Get confirmed transaction history for the specified address/scripthash, sorted by newest first.
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripthashApi
     */
    getRecentTxsByScripthash(hash: string, options?: any): Promise<import("axios").AxiosResponse<Transaction[]>>;
    /**
     *
     * @summary Get confirmed transaction history for the specified address/scripthash, sorted by newest first.
     * @param {string} hash
     * @param {string} lastSeenTxid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripthashApi
     */
    getTxsBeforeTxidByScripthash(hash: string, lastSeenTxid: string, options?: any): Promise<import("axios").AxiosResponse<Transaction[]>>;
    /**
     *
     * @summary Get transaction history for the specified address/scripthash, sorted with newest first. Can be used to query by op_return
     * @param {string} hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScripthashApi
     */
    getTxsByScripthash(hash: string, options?: any): Promise<import("axios").AxiosResponse<Transaction[]>>;
}
/**
 * TxApi - axios parameter creator
 * @export
 */
export declare const TxApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Returns the spending status of all transaction outputs.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTxOutspends: (txId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns information about the transaction.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTx: (txId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the raw transaction in hex.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxHex: (txId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a merkle inclusion proof for the transaction using bitcoind\'s merkleblock format.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxMerkleBlockProof: (txId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a merkle inclusion proof for the transaction using Electrum\'s blockchain.transaction.get_merkle format.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxMerkleProof: (txId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the spending status of a transaction output.
     * @param {string} txId
     * @param {number} vout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxOutspend: (txId: string, vout: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the raw transaction as binary data.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxRaw: (txId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns the transaction confirmation status.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxStatus: (txId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Broadcast a raw transaction to the network.
     * @param {string} body The transaction should be provided as hex in the request body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTx: (body: string, options?: any) => Promise<RequestArgs>;
};
/**
 * TxApi - functional programming interface
 * @export
 */
export declare const TxApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Returns the spending status of all transaction outputs.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTxOutspends(txId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Array<Spend>>>;
    /**
     *
     * @summary Returns information about the transaction.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTx(txId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Transaction>>;
    /**
     *
     * @summary Returns the raw transaction in hex.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxHex(txId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>>;
    /**
     *
     * @summary Returns a merkle inclusion proof for the transaction using bitcoind\'s merkleblock format.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxMerkleBlockProof(txId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>>;
    /**
     *
     * @summary Returns a merkle inclusion proof for the transaction using Electrum\'s blockchain.transaction.get_merkle format.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxMerkleProof(txId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponseDefault>>;
    /**
     *
     * @summary Returns the spending status of a transaction output.
     * @param {string} txId
     * @param {number} vout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxOutspend(txId: string, vout: number, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Spend>>;
    /**
     *
     * @summary Returns the raw transaction as binary data.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxRaw(txId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<any>>;
    /**
     *
     * @summary Returns the transaction confirmation status.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxStatus(txId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Status>>;
    /**
     *
     * @summary Broadcast a raw transaction to the network.
     * @param {string} body The transaction should be provided as hex in the request body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTx(body: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>>;
};
/**
 * TxApi - factory interface
 * @export
 */
export declare const TxApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Returns the spending status of all transaction outputs.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTxOutspends(txId: string, options?: any): AxiosPromise<Array<Spend>>;
    /**
     *
     * @summary Returns information about the transaction.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTx(txId: string, options?: any): AxiosPromise<Transaction>;
    /**
     *
     * @summary Returns the raw transaction in hex.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxHex(txId: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Returns a merkle inclusion proof for the transaction using bitcoind\'s merkleblock format.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxMerkleBlockProof(txId: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Returns a merkle inclusion proof for the transaction using Electrum\'s blockchain.transaction.get_merkle format.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxMerkleProof(txId: string, options?: any): AxiosPromise<InlineResponseDefault>;
    /**
     *
     * @summary Returns the spending status of a transaction output.
     * @param {string} txId
     * @param {number} vout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxOutspend(txId: string, vout: number, options?: any): AxiosPromise<Spend>;
    /**
     *
     * @summary Returns the raw transaction as binary data.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxRaw(txId: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Returns the transaction confirmation status.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTxStatus(txId: string, options?: any): AxiosPromise<Status>;
    /**
     *
     * @summary Broadcast a raw transaction to the network.
     * @param {string} body The transaction should be provided as hex in the request body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTx(body: string, options?: any): AxiosPromise<string>;
};
/**
 * TxApi - object-oriented interface
 * @export
 * @class TxApi
 * @extends {BaseAPI}
 */
export declare class TxApi extends BaseAPI {
    /**
     *
     * @summary Returns the spending status of all transaction outputs.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TxApi
     */
    getAllTxOutspends(txId: string, options?: any): Promise<import("axios").AxiosResponse<Spend[]>>;
    /**
     *
     * @summary Returns information about the transaction.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TxApi
     */
    getTx(txId: string, options?: any): Promise<import("axios").AxiosResponse<Transaction>>;
    /**
     *
     * @summary Returns the raw transaction in hex.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TxApi
     */
    getTxHex(txId: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Returns a merkle inclusion proof for the transaction using bitcoind\'s merkleblock format.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TxApi
     */
    getTxMerkleBlockProof(txId: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Returns a merkle inclusion proof for the transaction using Electrum\'s blockchain.transaction.get_merkle format.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TxApi
     */
    getTxMerkleProof(txId: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponseDefault>>;
    /**
     *
     * @summary Returns the spending status of a transaction output.
     * @param {string} txId
     * @param {number} vout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TxApi
     */
    getTxOutspend(txId: string, vout: number, options?: any): Promise<import("axios").AxiosResponse<Spend>>;
    /**
     *
     * @summary Returns the raw transaction as binary data.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TxApi
     */
    getTxRaw(txId: string, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     *
     * @summary Returns the transaction confirmation status.
     * @param {string} txId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TxApi
     */
    getTxStatus(txId: string, options?: any): Promise<import("axios").AxiosResponse<Status>>;
    /**
     *
     * @summary Broadcast a raw transaction to the network.
     * @param {string} body The transaction should be provided as hex in the request body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TxApi
     */
    postTx(body: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
}
