"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkChainHeight = exports.fetchVersionMetadata = exports.fetchVersionsFromChain = exports.fromChain = void 0;
const explorer_1 = require("./explorer");
async function fromChain(client, from = 0, log) {
    let headHash = await client.call('chain_getFinalizedHead');
    let height = await client.call('chain_getHeader', [headHash]).then((head) => {
        return Number.parseInt(head.number);
    });
    checkChainHeight(from, height);
    log?.(`chain height: ${height}`);
    let versions = await explorer_1.Explorer.getVersions(from, Math.max(from, height - 1), heights => {
        return fetchVersionsFromChain(client, heights);
    }, log);
    return fetchVersionMetadata(client, versions, log);
}
exports.fromChain = fromChain;
async function fetchVersionsFromChain(client, heights) {
    let versions = [];
    for (let height of heights) {
        let hash = await client.call('chain_getBlockHash', [height]);
        let rt = await client.call('chain_getRuntimeVersion', [hash]);
        versions.push({
            blockNumber: height,
            blockHash: hash,
            specVersion: rt.specVersion
        });
    }
    return versions;
}
exports.fetchVersionsFromChain = fetchVersionsFromChain;
async function fetchVersionMetadata(client, versions, log) {
    let records = [];
    for (let v of versions) {
        log?.(`fetching metadata for version ${v.specVersion}`);
        let metadata = await client.call('state_getMetadata', [v.blockHash]);
        records.push({ ...v, metadata });
    }
    return records;
}
exports.fetchVersionMetadata = fetchVersionMetadata;
function checkChainHeight(from, height) {
    if (from > height - 1 && from > 0) {
        throw new Error(`Exploration from block #${from} is not possible. Chain at least should reach the height ${from + 1}`);
    }
}
exports.checkChainHeight = checkChainHeight;
//# sourceMappingURL=fromChain.js.map