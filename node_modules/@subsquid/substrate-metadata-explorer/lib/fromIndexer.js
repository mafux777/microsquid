"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromIndexer = void 0;
const assert_1 = __importDefault(require("assert"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const explorer_1 = require("./explorer");
const fromChain_1 = require("./fromChain");
async function fromIndexer(chainClient, indexerUrl, from = 0, log) {
    let height = await indexerRequest(indexerUrl, `
        query {
            indexerStatus {
                head
            }
        }
    `).then(res => res.indexerStatus.head);
    (0, fromChain_1.checkChainHeight)(from, height);
    log?.(`chain height: ${height}`);
    let versions = await explorer_1.Explorer.getVersions(from, height, heights => {
        return fetchVersionsFromIndexer(chainClient, indexerUrl, heights);
    }, log);
    return (0, fromChain_1.fetchVersionMetadata)(chainClient, versions, log);
}
exports.fromIndexer = fromIndexer;
async function fetchVersionsFromIndexer(chainClient, indexerUrl, heights) {
    let response = await indexerRequest(indexerUrl, `query {
            substrate_block(where: {height: {_in: [${heights.join(', ')}]}}) {
                specVersion: runtimeVersion(path: "$.specVersion") 
                blockNumber: height 
                blockHash: hash
            }
         }`);
    let mapping = new Map(response.substrate_block.map(v => [v.blockNumber, v]));
    if (mapping.size != heights.length) {
        // Workaround for some indexers, which don't start from block 0 for historical reasons
        let missing = heights.filter(h => !mapping.has(h));
        let missingVersions = await (0, fromChain_1.fetchVersionsFromChain)(chainClient, missing);
        missingVersions.forEach(v => mapping.set(v.blockNumber, v));
    }
    return heights.map(h => assertNotNull(mapping.get(h)));
}
async function indexerRequest(indexerUrl, query) {
    let response = await (0, node_fetch_1.default)(indexerUrl, {
        method: 'POST',
        body: JSON.stringify({ query }),
        headers: {
            'content-type': 'application/json',
            'accept': 'application/json',
            'accept-encoding': 'gzip, br'
        }
    });
    if (!response.ok) {
        throw new Error(`Got http ${response.status}, body: ${await response.text()}`);
    }
    let result = await response.json();
    return result.data;
}
function assertNotNull(val, msg) {
    (0, assert_1.default)(val != null, msg);
    return val;
}
//# sourceMappingURL=fromIndexer.js.map