"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const commander_1 = require("commander");
const fs = __importStar(require("fs"));
const process = __importStar(require("process"));
const index_1 = require("./index");
function run() {
    let program = new commander_1.Command();
    program.description(`
Explores chain spec versions.

It scans the chain and finds all blocks where new spec version was introduced.
The result of exploration is saved in a json file:

[
    {
        "specVersion": 1,
        "blockNumber": 10,
        "blockHash": "0x..",
        "metadata": "0x.."
    },
    ...
]

If the output file already exists, exploration will start from the last known block.
The resulting file will be updated with new data.
`.trim());
    program.usage('squid-substrate-metadata-explorer --chain <ws://> --out <file> [options]');
    program.requiredOption('--chain <ws://>', 'chain rpc endpoint', urlOptionValidator(['ws:', 'wss:']));
    program.requiredOption('--out <file>', 'output file');
    program.option('--archive <url>', 'squid substrate archive (significantly speedups exploration)', urlOptionValidator(['http:', 'https:']));
    let options = program.parse().opts();
    let fromBlock = 0;
    let initialData;
    if (fs.existsSync(options.out)) {
        initialData = JSON.parse(fs.readFileSync(options.out, 'utf-8'));
        initialData?.sort((a, b) => a.blockNumber - b.blockNumber);
    }
    if (initialData?.length) {
        fromBlock = initialData[initialData.length - 1].blockNumber;
        console.log(`output file has explored versions, will continue from there and augment the file`);
    }
    if (fromBlock > 0) {
        console.log(`starting from block: ${fromBlock}`);
    }
    (0, index_1.exploreChainVersions)({
        chainEndpoint: options.chain,
        archiveEndpoint: options.archive,
        fromBlock,
        log: msg => console.log(msg)
    }).then(versions => {
        let data = initialData ? initialData.concat(versions.slice(1)) : versions;
        fs.writeFileSync(options.out, JSON.stringify(data, null, 2));
    }).catch(err => {
        console.error(err);
        process.exit(1);
    });
}
exports.run = run;
function urlOptionValidator(protocol) {
    return function (s) {
        let url;
        try {
            url = new URL(s);
        }
        catch (e) {
            throw new commander_1.InvalidOptionArgumentError('invalid url');
        }
        if (protocol && !protocol.includes(url.protocol)) {
            throw new commander_1.InvalidOptionArgumentError(`invalid protocol, expected ${protocol.join(', ')}`);
        }
        return url.toString();
    };
}
//# sourceMappingURL=main.js.map