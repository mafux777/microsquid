import { ChainDescription, OldTypesBundle, SpecVersion, Type } from "@subsquid/substrate-metadata";
import * as eac from "@subsquid/substrate-metadata/lib/events-and-calls";
import { Interfaces } from "./ifs";
export interface ChainVersion {
    specVersion: SpecVersion;
    blockNumber: number;
    blockHash: string;
    metadata: string;
}
export interface TypegenOptions {
    outDir: string;
    chainVersions: ChainVersion[];
    typesBundle?: OldTypesBundle;
    events?: string[] | boolean;
    calls?: string[] | boolean;
    storage?: string[] | boolean;
}
export declare class Typegen {
    private options;
    static generate(options: TypegenOptions): void;
    private interfaces;
    private dir;
    constructor(options: TypegenOptions);
    generate(): void;
    private generateEnums;
    private generateStorage;
    /**
     * Create a mapping between qualified name and list of unique versions
     */
    private collectItems;
    chain(): VersionDescription[];
    getInterface(specVersion: SpecVersion): Interfaces;
}
interface VersionDescription {
    specVersion: SpecVersion;
    blockNumber: number;
    types: Type[];
    events: eac.Registry;
    calls: eac.Registry;
    description: ChainDescription;
}
export {};
//# sourceMappingURL=typegen.d.ts.map