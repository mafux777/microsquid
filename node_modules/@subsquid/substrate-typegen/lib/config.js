"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigError = exports.readConfig = void 0;
const substrate_metadata_1 = require("@subsquid/substrate-metadata");
const ajv_1 = __importDefault(require("ajv"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const chainVersions_schema_json_1 = __importDefault(require("./chainVersions.schema.json"));
const config_schema_json_1 = __importDefault(require("./config.schema.json"));
const ajv = new ajv_1.default();
const validateConfig = ajv.compile(config_schema_json_1.default);
const validateChainVersions = ajv.compile(chainVersions_schema_json_1.default);
function readConfig(file) {
    let content;
    try {
        content = fs.readFileSync(file, 'utf-8');
    }
    catch (e) {
        throw new ConfigError(`Failed to read ${file}: ${e}`);
    }
    let json;
    try {
        json = JSON.parse(content);
    }
    catch (e) {
        throw new ConfigError(`Failed to parse ${file}: ${e}`);
    }
    if (validateConfig(json)) {
        let dir = path.dirname(path.resolve(file));
        let outDir = path.resolve(dir, json.outDir);
        let chainVersions = readChainVersions(path.resolve(dir, json.chainVersions));
        let typesBundle;
        if (json.typesBundle) {
            typesBundle = (0, substrate_metadata_1.getOldTypesBundle)(json.typesBundle) || (0, substrate_metadata_1.readOldTypesBundle)(path.resolve(dir, json.typesBundle));
        }
        return {
            outDir,
            chainVersions,
            typesBundle,
            events: json.events,
            calls: json.calls,
            storage: json.storage
        };
    }
    else {
        throw new ConfigError(`Invalid typegen config ${file}:\n  ${ajv.errorsText(validateConfig.errors, { separator: '\n  ' })}`);
    }
}
exports.readConfig = readConfig;
function readChainVersions(file) {
    let content;
    try {
        content = fs.readFileSync(file, 'utf-8');
    }
    catch (e) {
        throw new ConfigError(`Failed to read ${file}: ${e}`);
    }
    let json;
    try {
        json = JSON.parse(content);
    }
    catch (e) {
        throw new ConfigError(`Failed to parse ${file}: ${e}`);
    }
    if (validateChainVersions(json)) {
        return json;
    }
    else {
        throw new ConfigError(`Failed to extract chain versions from ${file}:\n  ${ajv.errorsText(validateConfig.errors, { separator: '\n  ' })}`);
    }
}
class ConfigError extends Error {
}
exports.ConfigError = ConfigError;
//# sourceMappingURL=config.js.map