"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Typegen = void 0;
const substrate_metadata_1 = require("@subsquid/substrate-metadata");
const eac = __importStar(require("@subsquid/substrate-metadata/lib/events-and-calls"));
const typesBundle_1 = require("@subsquid/substrate-metadata/lib/old/typesBundle");
const storage_1 = require("@subsquid/substrate-metadata/lib/storage");
const util_1 = require("@subsquid/util");
const assert_1 = __importDefault(require("assert"));
const ifs_1 = require("./ifs");
const util_2 = require("./util");
class Typegen {
    constructor(options) {
        this.options = options;
        this.interfaces = new Map();
        this.dir = new util_1.OutDir(options.outDir);
    }
    static generate(options) {
        new Typegen(options).generate();
    }
    generate() {
        this.dir.del();
        this.generateEnums('events');
        this.generateEnums('calls');
        this.generateStorage();
        this.interfaces.forEach((ifs, specVersion) => {
            if (ifs.isEmpty())
                return;
            let file = this.dir.file(`v${specVersion}.ts`);
            ifs.generate(file);
            file.write();
        });
        this.dir.add('support.ts', [__dirname, '../src/support.ts']);
    }
    generateEnums(kind) {
        let items = this.collectItems(this.options[kind], chain => Object.entries(chain[kind].definitions).map(([name, def]) => {
            return { name, def, chain };
        }), (chain, name) => chain[kind].getHash(name));
        if (items.size == 0)
            return;
        let out = this.dir.file(`${kind}.ts`);
        let fix = kind == 'events' ? 'Event' : 'Call';
        let ctx = kind == 'events' ? 'event' : 'extrinsic';
        let names = Array.from(items.keys()).sort();
        let importedInterfaces = new Set();
        out.line(`import assert from 'assert'`);
        out.line(`import {${fix}Context, Result, deprecateLatest} from './support'`);
        out.lazy(() => Array.from(importedInterfaces).sort().map(v => `import * as v${v} from './v${v}'`));
        names.forEach(name => {
            let versions = items.get(name);
            let { def: { pallet, name: unqualifiedName } } = versions[0];
            let className = (0, util_2.upperCaseFirst)((0, util_1.toCamelCase)(`${pallet}_${unqualifiedName}`)) + fix;
            out.line();
            out.block(`export class ${className}`, () => {
                out.block(`constructor(private ctx: ${fix}Context)`, () => {
                    let camelCased = (0, util_1.toCamelCase)(pallet) + '.' + (0, util_1.toCamelCase)(unqualifiedName);
                    if (camelCased == name || ctx == 'event') {
                        out.line(`assert(this.ctx.${ctx}.name === '${name}')`);
                    }
                    else {
                        out.line(`assert(this.ctx.${ctx}.name === '${camelCased}' || this.ctx.${ctx}.name === '${name}')`);
                    }
                });
                versions.forEach((version, idx) => {
                    let isLatest = versions.length === idx + 1;
                    let v = version.chain.specVersion;
                    let ifs = this.getInterface(v);
                    let unqualifiedTypeExp;
                    if (version.def.fields[0]?.name == null) {
                        unqualifiedTypeExp = ifs.makeTuple(version.def.fields.map(f => f.type));
                    }
                    else {
                        unqualifiedTypeExp = `{${version.def.fields.map(f => `${f.name}: ${ifs.use(f.type)}`).join(', ')}}`;
                    }
                    let typeExp = ifs.qualify('v' + v, unqualifiedTypeExp);
                    if (typeExp != unqualifiedTypeExp) {
                        importedInterfaces.add(v);
                    }
                    out.line();
                    out.blockComment(version.def.docs);
                    out.block(`get isV${v}(): boolean`, () => {
                        let hash = version.chain[kind].getHash(name);
                        out.line(`return this.ctx._chain.get${fix}Hash('${name}') === '${hash}'`);
                    });
                    out.line();
                    out.blockComment(version.def.docs);
                    out.block(`get asV${v}(): ${typeExp}`, () => {
                        out.line(`assert(this.isV${v})`);
                        out.line(`return this.ctx._chain.decode${fix}(this.ctx.${ctx})`);
                    });
                    if (isLatest) {
                        out.line();
                        out.block(`get isLatest(): boolean`, () => {
                            out.line(`deprecateLatest()`);
                            out.line(`return this.isV${v}`);
                        });
                        out.line();
                        out.block(`get asLatest(): ${typeExp}`, () => {
                            out.line(`deprecateLatest()`);
                            out.line(`return this.asV${v}`);
                        });
                    }
                });
            });
        });
        out.write();
    }
    generateStorage() {
        let items = this.collectItems(this.options.storage, chain => {
            let items = [];
            let storage = chain.description.storage;
            for (let prefix in storage) {
                for (let name in storage[prefix]) {
                    items.push({
                        chain,
                        name: prefix + '.' + name,
                        def: storage[prefix][name]
                    });
                }
            }
            return items;
        }, (chain, name) => {
            let [prefix, itemName] = name.split('.');
            return (0, storage_1.getStorageItemTypeHash)(chain.description.types, chain.description.storage[prefix][itemName]);
        });
        if (items.size == 0)
            return;
        let out = this.dir.file('storage.ts');
        let names = Array.from(items.keys()).sort();
        let importedInterfaces = new Set();
        out.line(`import assert from 'assert'`);
        out.line(`import {StorageContext, Result} from './support'`);
        out.lazy(() => Array.from(importedInterfaces).sort().map(v => `import * as v${v} from './v${v}'`));
        names.forEach(qualifiedName => {
            let versions = items.get(qualifiedName);
            let [prefix, name] = qualifiedName.split('.');
            out.line();
            out.block(`export class ${prefix}${name}Storage`, () => {
                out.line(`constructor(private ctx: StorageContext) {}`);
                versions.forEach(v => {
                    let hash = (0, storage_1.getStorageItemTypeHash)(v.chain.description.types, v.def);
                    let ifs = this.getInterface(v.chain.specVersion);
                    let types = v.def.keys.concat(v.def.value).map(ti => ifs.use(ti));
                    let qualifiedTypes = types.map(texp => ifs.qualify(`v${v.chain.specVersion}`, texp));
                    if (qualifiedTypes.some((texp, idx) => texp != types[idx])) {
                        importedInterfaces.add(v.chain.specVersion);
                    }
                    out.line();
                    out.blockComment(v.def.docs);
                    out.block(`get isV${v.chain.specVersion}()`, () => {
                        out.line(`return this.ctx._chain.getStorageItemTypeHash('${prefix}', '${name}') === '${hash}'`);
                    });
                    if ((0, util_2.isEmptyVariant)(v.chain.description.types[v.def.value])) {
                        // Meaning storage item can't hold any value
                        // Let's just silently omit .get method for this case
                    }
                    else {
                        out.line();
                        out.blockComment(v.def.docs);
                        let returnType = qualifiedTypes[qualifiedTypes.length - 1];
                        if (v.def.modifier == 'Optional') {
                            returnType = `${returnType} | undefined`;
                        }
                        let keyTypes = qualifiedTypes.slice(0, qualifiedTypes.length - 1);
                        let keyNames = keyTypes.map((type, idx) => {
                            if (qualifiedTypes.length == 2) {
                                return `key`;
                            }
                            else {
                                return `key${idx + 1}`;
                            }
                        });
                        let args = ['this.ctx.block.hash', `'${prefix}'`, `'${name}'`].concat(keyNames);
                        out.block(`async getAsV${v.chain.specVersion}(${keyNames.map((k, idx) => `${k}: ${keyTypes[idx]}`).join(', ')}): Promise<${returnType}>`, () => {
                            out.line(`assert(this.isV${v.chain.specVersion})`);
                            out.line(`return this.ctx._chain.getStorage(${args.join(', ')})`);
                        });
                    }
                });
                out.line();
                out.blockComment([
                    'Checks whether the storage item is defined for the current chain version.'
                ]);
                out.block(`get isExists(): boolean`, () => {
                    out.line(`return this.ctx._chain.getStorageItemTypeHash('${prefix}', '${name}') != null`);
                });
            });
        });
        out.write();
    }
    /**
     * Create a mapping between qualified name and list of unique versions
     */
    collectItems(req, extract, hash) {
        if (!req)
            return new Map();
        let requested = Array.isArray(req) ? new Set(req) : undefined;
        if (requested?.size === 0)
            return new Map();
        let list = this.chain().flatMap(chain => extract(chain));
        let items = (0, util_2.groupBy)(list, i => i.name);
        requested?.forEach(name => {
            if (!items.has(name)) {
                throw new Error(`${name} is not defined by the chain metadata`);
            }
        });
        items.forEach((versions, name) => {
            if (requested == null || requested.has(name)) {
                versions.sort((a, b) => a.chain.blockNumber - b.chain.blockNumber);
                let unique = [];
                versions.forEach(v => {
                    let prev = unique.length ? unique[unique.length - 1] : undefined;
                    if (prev && hash(v.chain, name) === hash(prev.chain, name)) {
                        // TODO: use the latest definition, but set specVersion and blockNumber of a previous one
                        // for hopefully better docs
                    }
                    else {
                        unique.push(v);
                    }
                });
                items.set(name, unique);
            }
            else {
                items.delete(name);
            }
        });
        return items;
    }
    chain() {
        return this.options.chainVersions.map(v => {
            let metadata = (0, substrate_metadata_1.decodeMetadata)(v.metadata);
            let oldTypes = this.options.typesBundle && (0, typesBundle_1.getTypesFromBundle)(this.options.typesBundle, v.specVersion);
            let d = (0, substrate_metadata_1.getChainDescriptionFromMetadata)(metadata, oldTypes);
            return {
                specVersion: v.specVersion,
                blockNumber: v.blockNumber,
                types: d.types,
                events: new eac.Registry(d.types, d.event),
                calls: new eac.Registry(d.types, d.call),
                description: d
            };
        }).sort((a, b) => a.blockNumber - b.blockNumber);
    }
    getInterface(specVersion) {
        let ifs = this.interfaces.get(specVersion);
        if (ifs)
            return ifs;
        let d = this.chain().find(v => v.specVersion == specVersion);
        (0, assert_1.default)(d != null);
        ifs = new ifs_1.Interfaces(d.description);
        this.interfaces.set(specVersion, ifs);
        return ifs;
    }
}
__decorate([
    util_1.def,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Array)
], Typegen.prototype, "chain", null);
exports.Typegen = Typegen;
//# sourceMappingURL=typegen.js.map