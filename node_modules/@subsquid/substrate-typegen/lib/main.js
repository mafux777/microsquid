"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const substrate_metadata_1 = require("@subsquid/substrate-metadata");
const commander_1 = require("commander");
const process = __importStar(require("process"));
const config_1 = require("./config");
const typegen_1 = require("./typegen");
function run() {
    let program = new commander_1.Command();
    program.description(`
Generates TypeScript definitions for chain events and extrinsics
for use within substrate-processor mapping handlers.
    `.trim());
    program.argument('config', 'JSON file with options');
    let configFile = program.parse().args[0];
    try {
        let config = (0, config_1.readConfig)(configFile);
        typegen_1.Typegen.generate(config);
    }
    catch (e) {
        printError(e);
        process.exit(1);
    }
}
exports.run = run;
function printError(err) {
    if (err instanceof config_1.ConfigError || err instanceof substrate_metadata_1.OldTypesBundleError) {
        console.error(`error: ${err.message}`);
    }
    else {
        console.error(err);
    }
}
//# sourceMappingURL=main.js.map