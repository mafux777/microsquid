"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeormTransaction = exports.EMDatabase = void 0;
class EMDatabase {
    constructor(em) {
        this.em = em;
    }
    async query(sql, parameters) {
        let records = await this.em.query(sql, parameters);
        let rows = new Array(records.length);
        let len = 0;
        for (let i = 0; i < records.length; i++) {
            let rec = records[i];
            let row = new Array(len);
            let j = 0;
            for (let key in rec) {
                row[j] = rec[key];
                j += 1;
            }
            len = j;
            rows[i] = row;
        }
        return rows;
    }
    escapeIdentifier(name) {
        return this.em.connection.driver.escape(name);
    }
}
exports.EMDatabase = EMDatabase;
class TypeormTransaction {
    constructor(con) {
        this.con = con;
        this.closed = false;
    }
    async get() {
        let tx = await this.getTx();
        return tx.db;
    }
    async getEntityManager() {
        let tx = await this.getTx();
        return tx.em;
    }
    getTx() {
        if (this.closed) {
            throw new Error('Too late to request transaction');
        }
        if (this.tx)
            return this.tx;
        return this.tx = new Promise((resolve, reject) => {
            this.con.transaction('SERIALIZABLE', (em) => {
                return new Promise((close) => {
                    resolve({
                        em,
                        db: new EMDatabase(em),
                        close: () => close(undefined)
                    });
                });
            }).catch((err) => reject(err));
        });
    }
    close() {
        this.closed = true;
        this.tx?.then(tx => tx.close()).catch(err => null);
    }
}
exports.TypeormTransaction = TypeormTransaction;
//# sourceMappingURL=typeorm.js.map