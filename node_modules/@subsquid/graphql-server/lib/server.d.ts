/// <reference types="node" />
import { Model } from "@subsquid/openreader/dist/model";
import { ListeningServer } from "@subsquid/openreader/dist/server";
import { ApolloServerExpressConfig } from "apollo-server-express";
import express from "express";
import * as http from "http";
import { Pool } from "pg";
import type { Connection } from "typeorm";
import { RequestCheckFunction } from "./check";
import type { CustomResolvers } from "./resolvers";
export declare class Server {
    private dir;
    private db?;
    constructor(dir?: string);
    path(name: string): string;
    run(): void;
    private getPort;
    start(): Promise<ListeningServer>;
    app(): express.Application;
    httpServer(): http.Server;
    config(): Promise<ApolloServerExpressConfig>;
    private createTypeormResolverContext;
    private createPoolResolverContext;
    customResolvers(): Promise<CustomResolvers | undefined>;
    customCheck(): RequestCheckFunction | undefined;
    private module;
    pgPool(): Pool;
    typeormConnection(): Promise<Connection>;
    model(): Model;
}
//# sourceMappingURL=server.d.ts.map