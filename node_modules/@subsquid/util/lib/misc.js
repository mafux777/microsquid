"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveGraphqlSchema = exports.unexpectedCase = exports.def = exports.assertNotNull = void 0;
const assert_1 = __importDefault(require("assert"));
const fs_1 = __importDefault(require("fs"));
const path = __importStar(require("path"));
const process = __importStar(require("process"));
function assertNotNull(val, msg) {
    (0, assert_1.default)(val != null, msg);
    return val;
}
exports.assertNotNull = assertNotNull;
/**
 * Method decorator, which when applied caches the result of the first invocation and returns it
 * for all subsequent calls.
 */
function def(proto, prop, d) {
    let { value: fn, ...options } = d;
    let is_ready = Symbol(prop + '_is_ready');
    let is_active = Symbol(prop + '_is_active');
    let cache = Symbol(prop + '_cache');
    let value = function () {
        if (this[is_ready])
            return this[cache];
        if (this[is_active])
            throw new Error('Cycle detected involving ' + prop);
        this[is_active] = true;
        try {
            this[cache] = fn.call(this);
            this[is_ready] = true;
        }
        finally {
            this[is_active] = false;
        }
        return this[cache];
    };
    value._def_cache_symbol = cache;
    return { value, ...options };
}
exports.def = def;
function unexpectedCase(val) {
    return new Error(val ? `Unexpected case: ${val}` : `Unexpected case`);
}
exports.unexpectedCase = unexpectedCase;
function resolveGraphqlSchema(projectDir) {
    let dir = projectDir || process.cwd();
    let loc = path.resolve(dir, 'schema.graphql');
    if (fs_1.default.existsSync(loc))
        return loc;
    loc = path.resolve(dir, 'schema');
    let stat = fs_1.default.statSync(loc, { throwIfNoEntry: false });
    if (stat?.isDirectory()) {
        let hasGraphql = fs_1.default.readdirSync(loc).some(item => item.endsWith('.graphql') || item.endsWith('.gql'));
        if (hasGraphql)
            return loc;
    }
    throw new Error(`Failed to locate schema.graphql at ${dir}`);
}
exports.resolveGraphqlSchema = resolveGraphqlSchema;
//# sourceMappingURL=misc.js.map