"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeUnsignedInt = exports.decodeBinaryArray = exports.decodePrimitive = exports.decodeCompact = void 0;
const util_1 = require("@subsquid/scale-codec/lib/util");
const ss58 = __importStar(require("@subsquid/ss58-codec"));
const util_internal_hex_1 = require("@subsquid/util-internal-hex");
const assert_1 = __importDefault(require("assert"));
function decodeCompact(integer, value) {
    let n = decodePrimitive(integer, value);
    switch (typeof n) {
        case 'number':
            return n;
        case 'bigint':
            if (n < 2n ** 48n) {
                return Number(n);
            }
            else {
                return n;
            }
        default:
            (0, util_1.throwUnexpectedCase)();
    }
}
exports.decodeCompact = decodeCompact;
function decodePrimitive(type, value) {
    switch (type) {
        case "I8":
            return toInt(8, value);
        case "I16":
            return toInt(16, value);
        case "I32":
            return toInt(32, value);
        case "I64":
            return toBigInt(64n, value);
        case "I128":
            return toBigInt(128n, value);
        case "I256":
            return toBigInt(256n, value);
        case "U8":
            return toUnsignedInt(8, value);
        case "U16":
            return toUnsignedInt(16, value);
        case "U32":
            return toUnsignedInt(32, value);
        case "U64":
            return toBigUnsignedInt(64n, value);
        case "U128":
            return toBigUnsignedInt(128n, value);
        case "U256":
            return toBigUnsignedInt(256n, value);
        case "Bool":
            (0, assert_1.default)(typeof value == "boolean");
            return value;
        case "Str":
            (0, assert_1.default)(typeof value == "string");
            return value;
        default:
            (0, util_1.throwUnexpectedCase)(type);
    }
}
exports.decodePrimitive = decodePrimitive;
function toUnsignedInt(len, val) {
    let n;
    switch (typeof val) {
        case "number":
            n = val;
            break;
        case "string":
            if (val == '0x')
                return 0;
            if (/^0x[a-fA-F0-9]+$/.test(val)) {
                n = Number(val);
            }
            else if (len == 32) {
                n = decodeGenericAccountIndex(val);
            }
            else {
                throw new Error(`Invalid U${len}: "${val}"`);
            }
            break;
        default:
            throw new Error(`Invalid U${len}: ${val}`);
    }
    (0, assert_1.default)(Number.isSafeInteger(n) && n >= 0 && n < (2 ** len));
    return n;
}
function decodeGenericAccountIndex(s) {
    let bytes = ss58.decode(s).bytes;
    (0, assert_1.default)(bytes.length <= 4);
    let val = 0;
    for (let i = 0; i < bytes.length; i++) {
        val += bytes[i] * (2 ** (8 * i));
    }
    return val;
}
function toBigUnsignedInt(len, val) {
    let n;
    switch (typeof val) {
        case "number":
            (0, assert_1.default)(Number.isInteger(val));
            n = BigInt(val);
            break;
        case "string":
            if (val == '0x')
                return 0n;
            if (/^\d+$/.test(val) || /^0x[a-fA-F0-9]+$/.test(val)) {
                n = BigInt(val);
            }
            else {
                throw new Error(`Invalid U${len}: "${val}"`);
            }
            break;
        default:
            throw new Error(`Invalid U${len}: ${val}`);
    }
    (0, assert_1.default)(n >= 0n && n < (2n ** len));
    return n;
}
function toInt(len, val) {
    let n;
    switch (typeof val) {
        case 'number':
            n = val;
            break;
        case 'string':
            if (val == '0x') {
                n = 0;
            }
            else if (/^0x[a-fA-F0-9]+$/.test(val)) {
                let unsigned = Number(val);
                let base = 2 ** len;
                let mask = 2 ** (len - 1);
                let sign = (mask & unsigned) >> (len - 1);
                n = unsigned - sign * base;
            }
            else {
                throw new Error(`Invalid I${len}: "${val}"`);
            }
            break;
        default:
            throw new Error(`Invalid I${len}: "${val}"`);
    }
    (0, assert_1.default)(Number.isSafeInteger(n) && Math.abs(n) < 2 ** (len - 1));
    return n;
}
function toBigInt(len, val) {
    let n;
    switch (typeof val) {
        case 'number':
            (0, assert_1.default)(Number.isInteger(val));
            n = BigInt(val);
            break;
        case 'string':
            if (val == '0x') {
                n = 0n;
            }
            else if (/^-?\d+$/.test(val)) {
                n = BigInt(val);
            }
            else if (/^0x[a-fA-F0-9]+$/.test(val)) {
                let unsigned = BigInt(val);
                let base = 2n ** len;
                let mask = 2n ** (len - 1n);
                let sign = (mask & unsigned) >> (len - 1n);
                n = unsigned - sign * base;
            }
            else {
                throw new Error(`Invalid I${len}: "${val}"`);
            }
            break;
        default:
            throw new Error(`Invalid I${len}: "${val}"`);
    }
    let abs = n < 0n ? -1n * n : n;
    (0, assert_1.default)(abs < 2n ** (len - 1n));
    return n;
}
function decodeBinaryArray(len, value) {
    (0, assert_1.default)(typeof value == "string");
    if ((0, util_internal_hex_1.isHex)(value)) {
        (0, assert_1.default)(value.length - 2 == len * 2);
        return Buffer.from(value.slice(2), "hex");
    }
    else {
        let bytes = ss58.decode(value).bytes;
        (0, assert_1.default)(bytes.length == len, "unexpected address length");
        return bytes;
    }
}
exports.decodeBinaryArray = decodeBinaryArray;
function encodeUnsignedInt(byteLength, n) {
    let buf = Buffer.alloc(byteLength, 0);
    let pos = 0;
    while (n > 0n) {
        (0, assert_1.default)(pos < byteLength);
        buf[pos] = Number(n & 255n);
        n = n >> 8n;
        pos += 1;
    }
    return buf;
}
exports.encodeUnsignedInt = encodeUnsignedInt;
//# sourceMappingURL=util.js.map