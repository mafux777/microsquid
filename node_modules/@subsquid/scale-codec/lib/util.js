"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unsignedIntByteLength = exports.UTF8_ENCODER = exports.UTF8_DECODER = exports.checkBigInt = exports.checkInt = exports.throwUnexpectedCase = exports.assertNotNull = void 0;
const assert_1 = __importDefault(require("assert"));
function assertNotNull(val, msg) {
    (0, assert_1.default)(val != null, msg);
    return val;
}
exports.assertNotNull = assertNotNull;
function throwUnexpectedCase(val) {
    throw new Error(val ? `Unexpected case: ${val}` : `Unexpected case`);
}
exports.throwUnexpectedCase = throwUnexpectedCase;
function checkInt(val, typeName, min, max) {
    let ok = Number.isInteger(val) && min <= val && max >= val;
    if (!ok)
        throw new Error(`Invalid ${typeName}: ${val}`);
}
exports.checkInt = checkInt;
function checkBigInt(val, typeName, min, max) {
    let ok = typeof val == 'bigint' && min <= val && max >= val;
    if (!ok)
        throw new Error(`Invalid ${typeName}: ${val}`);
}
exports.checkBigInt = checkBigInt;
exports.UTF8_DECODER = new TextDecoder("utf-8", {
    fatal: true,
    ignoreBOM: false
});
exports.UTF8_ENCODER = new TextEncoder();
function unsignedIntByteLength(val) {
    let len = 0;
    while (val > 0n) {
        val = val >> 8n;
        len += 1;
    }
    return len;
}
exports.unsignedIntByteLength = unsignedIntByteLength;
//# sourceMappingURL=util.js.map