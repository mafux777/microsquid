import type { ClientBase, Pool, PoolConfig } from "pg";
export interface Database {
    query(sql: string, parameters?: any[]): Promise<any[][]>;
    escapeIdentifier(name: string): string;
}
/**
 * This is an interface OpenReader uses to interact with underling database.
 */
export interface Transaction {
    get(): Promise<Database>;
}
export declare class PgDatabase implements Database {
    private client;
    constructor(client: ClientBase);
    query(sql: string, parameters?: any[]): Promise<any[]>;
    escapeIdentifier(name: string): string;
}
export declare class PoolTransaction implements Transaction {
    private pool;
    private tx;
    private closed;
    constructor(pool: Pool);
    get(): Promise<Database>;
    private startTransaction;
    close(): Promise<void>;
}
export declare function createPoolConfig(): PoolConfig;
//# sourceMappingURL=db.d.ts.map