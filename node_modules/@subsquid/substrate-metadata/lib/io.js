"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OldTypesBundleError = exports.readOldTypesBundle = exports.getOldTypesBundle = void 0;
const fs_1 = __importDefault(require("fs"));
function getOldTypesBundle(chain) {
    switch (chain) {
        case 'altair':
            return require('./old/definitions/altair').bundle;
        case 'bifrost':
            return require('./old/definitions/bifrost').bundle;
        case 'khala':
            return require('./old/definitions/khala').bundle;
        case 'kusama':
            return require('./old/definitions/kusama').bundle;
        case 'moonbeam':
        case 'moonbase':
        case 'moonriver':
            return require('./old/definitions/moonsama').bundle;
        case 'polkadot':
            return require('./old/definitions/polkadot').bundle;
        case 'acala':
        case 'karura':
            return require('./old/definitions/acala').bundle;
        case 'astar':
            return require('./old/definitions/astar').bundle;
        case 'shiden':
            return require('./old/definitions/shiden').bundle;
        case 'crust':
            return require('./old/definitions/crust').bundle;
        case 'statemint':
        case 'statemine':
            return require('./old/definitions/statemint').bundle;
        case 'subsocial':
            return require('./old/definitions/subsocial').bundle;
        case 'kilt':
            return require('./old/definitions/kilt').bundle;
        case 'hydradx':
            return require('./old/definitions/hydradx').bundle;
        case 'pioneer':
            return require('./old/definitions/pioneer').bundle;
        case 'parallel':
        case 'heiko':
            return require('./old/definitions/parallel').bundle;
        case 'clover':
            return require('./old/definitions/clover').bundle;
        case 'manta':
            return require('./old/definitions/manta').bundle;
        case 'calamari':
            return require('./old/definitions/calamari').bundle;
        case 'basilisk':
            return require('./old/definitions/basilisk').bundle;
        case 'unique':
        case 'quartz':
            return require('./old/definitions/unique').bundle;
        case 'darwinia':
            return require('./old/definitions/darwinia').bundle;
        case 'kintsugi':
            return require('./old/definitions/kintsugi').bundle;
        default:
            return undefined;
    }
}
exports.getOldTypesBundle = getOldTypesBundle;
function readOldTypesBundle(file) {
    let content;
    try {
        content = fs_1.default.readFileSync(file, 'utf-8');
    }
    catch (e) {
        throw new OldTypesBundleError(`Failed to read ${file}: ${e}`);
    }
    let json;
    try {
        json = JSON.parse(content);
    }
    catch (e) {
        throw new OldTypesBundleError(`Failed to parse ${file}: ${e}`);
    }
    // TODO: verify structure
    return json;
}
exports.readOldTypesBundle = readOldTypesBundle;
class OldTypesBundleError extends Error {
}
exports.OldTypesBundleError = OldTypesBundleError;
//# sourceMappingURL=io.js.map