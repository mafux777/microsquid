import { EvmContractAddress, EvmLogHandler, EvmTopicSet } from "./interfaces/evm";
import { BlockHandler, EventHandler, ExtrinsicHandler } from "./interfaces/handlerContext";
import { Hooks } from "./interfaces/hooks";
import { QualifiedName } from "./interfaces/substrate";
import { Range } from "./util/range";
export interface DataHandlers {
    pre: BlockHandler[];
    post: BlockHandler[];
    events: Record<QualifiedName, EventHandler[]>;
    /**
     * Mapping of type `trigger event` -> `extrinsic` -> `extrinsic handler list`
     */
    extrinsics: Record<QualifiedName, Record<QualifiedName, ExtrinsicHandler[]>>;
    evmLogs: Record<EvmContractAddress, {
        filter?: EvmTopicSet[];
        handler: EvmLogHandler;
    }[]>;
}
export interface Batch {
    range: Range;
    handlers: DataHandlers;
}
export declare function createBatches(hooks: Hooks, blockRange?: Range): Batch[];
export declare function mergeBatches(batches: Batch[]): Batch[];
export declare function getBlocksCount(batches: {
    range: Range;
}[], chainHeight: number): number;
//# sourceMappingURL=batch.d.ts.map