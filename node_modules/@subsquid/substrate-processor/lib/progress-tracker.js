"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressTracker = void 0;
const batch_1 = require("./batch");
class ProgressTracker {
    constructor(count, wholeRange, prometheus) {
        this.count = count;
        this.wholeRange = wholeRange;
        this.prometheus = prometheus;
        this.window = [];
        this.ratio = 0;
        this.eta = 0;
        this.tick(process.hrtime.bigint(), 0);
    }
    tick(time, inc) {
        this.count += inc;
        this.window.push({
            time,
            count: this.count
        });
        if (this.window.length > 5) {
            this.window.shift();
        }
        return time;
    }
    batch(time, batch) {
        this.tick(time, batch.range.to - batch.range.from + 1);
        let total = (0, batch_1.getBlocksCount)(this.wholeRange, this.prometheus.getChainHeight());
        this.ratio = Math.round(10000 * this.count / total) / 10000;
        this.prometheus.setSyncRatio(this.ratio);
        let beg = this.window[0];
        let end = this.window[this.window.length - 1];
        let duration = end.time - beg.time;
        let processed = end.count - beg.count;
        this.eta = Number(BigInt(total - this.count) * duration / (BigInt(processed) * 1000000000n));
        this.prometheus.setSyncETA(this.eta);
    }
    getSyncRatio() {
        return this.ratio;
    }
    getSyncEtaSeconds() {
        return this.eta;
    }
}
exports.ProgressTracker = ProgressTracker;
//# sourceMappingURL=progress-tracker.js.map