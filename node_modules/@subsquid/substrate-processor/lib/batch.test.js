"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("@subsquid/util");
const assert_1 = __importDefault(require("assert"));
const fc = __importStar(require("fast-check"));
const batch_1 = require("./batch");
const range_1 = require("./util/range");
const aClosedRange = fc.tuple(fc.nat(), fc.nat()).map(([a, b]) => {
    if (a < b) {
        return { from: a, to: b };
    }
    else {
        return { from: b, to: a };
    }
});
const aOpenRange = fc.nat().map(a => ({ from: a }));
const aPointRange = fc.nat().map(a => ({ from: a, to: a }));
const aRange = fc.oneof(aClosedRange, aOpenRange, aPointRange);
const aOptionalRange = fc.option(aRange, { freq: 10, nil: undefined });
const aBlockHook = aOptionalRange.map(range => {
    return {
        range,
        handler: {
            range: range == null ? { from: 0 } : range
        }
    };
});
const aEventName = fc.nat({ max: 10 }).map(n => 'e' + n);
const aEventHook = fc.tuple(aOptionalRange, aEventName).map(([range, event]) => {
    return {
        range,
        event,
        handler: {
            range: range == null ? { from: 0 } : range,
            event
        }
    };
});
const aContractAddress = fc.nat({ max: 10 }).map(n => 'a' + n);
const aEvmLogHook = fc.tuple(aOptionalRange, aContractAddress).map(([range, aContractAddress]) => {
    return {
        range,
        contractAddress: aContractAddress,
        handler: {
            range: range == null ? { from: 0 } : range,
            contractAddress: aContractAddress
        }
    };
});
const aCallName = fc.nat({ max: 10 }).map(n => 'c' + n);
const aExtrinsicHook = fc.tuple(aOptionalRange, aCallName, aEventName).map(([range, extrinsic, event]) => {
    return {
        range,
        extrinsic,
        event,
        handler: {
            range: range == null ? { from: 0 } : range,
            event,
            extrinsic
        }
    };
});
const aHooks = fc.record({
    pre: fc.array(aBlockHook),
    post: fc.array(aBlockHook),
    event: fc.array(aEventHook),
    extrinsic: fc.array(aExtrinsicHook),
    evmLog: fc.array(aEvmLogHook)
});
const aHooksWithRange = fc.tuple(aHooks, fc.option(aRange, { freq: 2, nil: undefined }));
function makeBatches(hooks, range) {
    return (0, batch_1.createBatches)(hooks, range);
}
function assertBatch(test, params) {
    fc.assert(fc.property(aHooksWithRange, ([hooks, range]) => {
        let batches = makeBatches(hooks, range);
        return test(batches);
    }), params);
}
describe('batching', function () {
    it('ranges are well formed', function () {
        assertBatch(batches => {
            return batches.every(b => {
                let { from, to } = b.range;
                return from >= 0 && (to == null || from <= to);
            });
        });
    });
    it('ranges are properly sorted and do not intersect', function () {
        assertBatch(batches => {
            for (let i = 1; i < batches.length; i++) {
                let current = batches[i].range;
                let prev = batches[i - 1].range;
                if ((0, range_1.rangeEnd)(prev) >= current.from)
                    return false;
            }
        });
    });
    it('each handler is never called outside of its range', function () {
        assertBatch(batches => {
            return batches.every(b => {
                let hs = b.handlers;
                let prePostHooksOk = hs.pre.concat(hs.post).every(h => {
                    return containsRange(h.range, b.range);
                });
                let eventHandlersOk = Object.entries(hs.events).every(([_, handlers]) => {
                    return handlers.every(h => containsRange(h.range, b.range));
                });
                let extrinsicHandlersOk = Object.entries(hs.extrinsics).every(e => {
                    return Object.entries(e[1]).every(([_, handlers]) => {
                        return handlers.every(h => containsRange(h.range, b.range));
                    });
                });
                let evmLogHandlersOk = Object.entries(hs.evmLogs).every(([_, handlers]) => {
                    return handlers.every(h => containsRange(h.handler.range, b.range));
                });
                return prePostHooksOk && eventHandlersOk && extrinsicHandlersOk && evmLogHandlersOk;
            });
        });
    });
    it('event handler is never called for wrong event', function () {
        assertBatch(batches => {
            return batches.every(b => {
                return Object.entries(b.handlers.events).every(([e, handlers]) => {
                    return handlers.every(h => h.event === e);
                });
            });
        });
    });
    it('evm log handler is never called for wrong contract address', function () {
        assertBatch(batches => {
            return batches.every(b => {
                return Object.entries(b.handlers.evmLogs).every(([contract, handlers]) => {
                    return handlers.every(h => h.handler.contractAddress === contract);
                });
            });
        });
    });
    it('extrinsic handler is never called for wrong extrinsic', function () {
        assertBatch(batches => {
            return batches.every(b => {
                return Object.entries(b.handlers.extrinsics).every(([event, extrinsics]) => {
                    return Object.entries(extrinsics).every(([extrinsic, handlers]) => {
                        return handlers.every(h => h.event === event && h.extrinsic === extrinsic);
                    });
                });
            });
        });
    });
    it('the entire range of each handler is covered', function () {
        fc.assert(fc.property(aHooksWithRange, ([hooks, blockRange]) => {
            let handlers = new Map();
            function add(hook) {
                let range = hook.handler.range;
                if (blockRange) {
                    let i = (0, range_1.rangeIntersection)(blockRange, range);
                    if (i) {
                        range = i;
                    }
                    else {
                        return;
                    }
                }
                handlers.set(hook.handler, range);
            }
            hooks.pre.forEach(add);
            hooks.post.forEach(add);
            hooks.event.forEach(add);
            hooks.extrinsic.forEach(add);
            hooks.evmLog.forEach(add);
            let batches = makeBatches(hooks, blockRange);
            batches.forEach(b => {
                function call(h) {
                    let range = (0, util_1.assertNotNull)(handlers.get(h));
                    (0, assert_1.default)(b.range.from == range.from);
                    if (b.range.to != null && b.range.to < (0, range_1.rangeEnd)(range)) {
                        handlers.set(h, { ...range, from: b.range.to + 1 });
                    }
                    else {
                        handlers.set(h, undefined);
                    }
                }
                b.handlers.pre.forEach(call);
                b.handlers.post.forEach(call);
                Object.entries(b.handlers.events).forEach(([event, hs]) => {
                    hs.forEach(call);
                });
                Object.entries(b.handlers.extrinsics).forEach(([event, extrinsics]) => {
                    Object.entries(extrinsics).forEach(([ex, hs]) => {
                        hs.forEach(call);
                    });
                });
                Object.entries(b.handlers.evmLogs).forEach(([contractAddress, hs]) => {
                    hs.forEach(h => call(h.handler));
                });
            });
            return Array.from(handlers.values()).every(r => r == null);
        }), {
            numRuns: 2000
        });
    });
});
function containsRange(a, b) {
    return a.from <= b.from && (a.to == null || a.to >= (b.to ?? Infinity));
}
//# sourceMappingURL=batch.test.js.map