import { Connection } from "typeorm";
import { Store } from "./interfaces/handlerContext";
export interface ProcessingStatus {
    height: number;
}
export declare type IsolationLevel = 'SERIALIZABLE' | 'READ COMMITTED' | 'REPEATABLE READ';
export interface DbOptions {
    processorName: string;
    isolationLevel?: IsolationLevel;
}
export declare class Db {
    private con;
    static connect(options: DbOptions): Promise<Db>;
    private statusSchema;
    private isolationLevel;
    private maxTxAttempts;
    constructor(con: Connection, options: DbOptions);
    init(): Promise<ProcessingStatus>;
    private tx;
    transact(blockNumber: number, cb: (em: Store) => Promise<void>): Promise<number>;
    setHeight(blockNumber: number): Promise<void>;
    close(): Promise<void>;
}
//# sourceMappingURL=db.d.ts.map