import { ResilientRpcClient } from "@subsquid/rpc-client/lib/resilient";
import { ChainDescription, OldTypesBundle, QualifiedName, SpecVersion } from "@subsquid/substrate-metadata";
import type { SubstrateRuntimeVersion } from "./interfaces/substrate";
/**
 * Subset of SubstrateBlock properties required for getting
 * chain metadata for a given block
 */
interface BlockInfo {
    height: number;
    hash: string;
    parentHash: string;
    runtimeVersion: SpecVersion | SubstrateRuntimeVersion;
}
export declare class ChainManager {
    private client;
    private typesBundle?;
    private versions;
    constructor(client: ResilientRpcClient, typesBundle?: OldTypesBundle | undefined);
    getChainForBlock(block: BlockInfo): Promise<Chain>;
    private createChain;
}
export declare class Chain {
    readonly description: ChainDescription;
    private client;
    private jsonCodec;
    private scaleCodec;
    private events;
    private calls;
    private storageHash;
    constructor(description: ChainDescription, client: ResilientRpcClient);
    getEventHash(eventName: QualifiedName): string;
    getCallHash(callName: QualifiedName): string;
    decodeEvent(event: {
        name: string;
        params: {
            value: unknown;
        }[];
    }): any;
    decodeCall(call: {
        name: string;
        args: {
            value: unknown;
        }[];
    }): any;
    private decode;
    private decodeTuple;
    getStorage(blockHash: string, prefix: string, name: string, ...keys: any[]): Promise<any>;
    private getStorageItem;
    getStorageItemTypeHash(prefix: string, name: string): string | undefined;
}
export {};
//# sourceMappingURL=chain.d.ts.map