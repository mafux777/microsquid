"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const tools_1 = require("@subsquid/openreader/dist/tools");
const util_1 = require("@subsquid/util");
const fs = __importStar(require("fs"));
const codegen_1 = require("../codegen");
const fts_1 = require("../fts");
class Codegen extends core_1.Command {
    async run() {
        let model = (0, tools_1.loadModel)((0, util_1.resolveGraphqlSchema)());
        let orm = new util_1.OutDir('src/model');
        let generatedOrm = orm.child('generated');
        generatedOrm.del();
        (0, codegen_1.generateOrmModels)(model, generatedOrm);
        if (!fs.existsSync(orm.path('index.ts'))) {
            let index = orm.file('index.ts');
            index.line(`export * from "./generated"`);
            index.write();
        }
        (0, fts_1.generateFtsMigrations)(model, new util_1.OutDir('db/migrations'));
    }
}
exports.default = Codegen;
Codegen.description = 'Analyze graphql schema and generate ORM model files';
//# sourceMappingURL=codegen.js.map