"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const js_yaml_1 = __importDefault(require("js-yaml"));
const core_1 = require("@oclif/core");
const baseUrl_1 = require("../../rest-client/baseUrl");
const request_1 = require("../../rest-client/request");
const creds_1 = require("../../creds");
const readFileAsync = (0, util_1.promisify)(fs_1.readFile);
async function processFiles(files, basePath) {
    return Promise.all(files.map(async (file) => {
        console.log(file);
        if ('data' in file) {
            return file;
        }
        else if (file.url.startsWith('http://') || file.url.startsWith('https://')) {
            return file;
        }
        return {
            name: file.name,
            data: await readFileAsync(path_1.default.join(basePath, file.url), 'utf-8')
        };
    }));
}
class Deploy extends core_1.Command {
    async run() {
        const { flags: { manifestPath, reset }, args: { name } } = await this.parse(Deploy);
        const manifest = js_yaml_1.default.load((0, fs_1.readFileSync)(manifestPath, 'utf-8'));
        const basePath = path_1.default.dirname(path_1.default.resolve(manifestPath));
        if (manifest.archive?.indexer?.files?.length) {
            manifest.archive.indexer.files = await processFiles(manifest.archive.indexer.files, basePath);
        }
        const response = await (0, request_1.request)(`${baseUrl_1.baseUrl}/client/archives`, {
            method: 'post',
            body: JSON.stringify({
                name,
                manifest,
                reset,
            }),
            headers: {
                'Content-Type': 'application/json',
                authorization: `token ${(0, creds_1.getCreds)()}`,
            },
        });
        const responseBody = await response.json();
        if (response.status === 200) {
            this.log(`Created archive with name ${responseBody.name}`);
        }
    }
}
exports.default = Deploy;
Deploy.description = 'Deploy an archive';
Deploy.args = [
    {
        name: 'name',
        description: 'archive name',
        required: true,
    },
];
Deploy.flags = {
    manifestPath: core_1.Flags.string({
        char: 'm',
        description: 'manifest path',
        required: false,
        default: './manifest.yaml'
    }),
    reset: core_1.Flags.boolean({
        char: 'r',
        description: 'reset database',
        required: false,
        default: false
    }),
};
//# sourceMappingURL=deploy.js.map