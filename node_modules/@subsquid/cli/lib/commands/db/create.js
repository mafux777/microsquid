"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const typeorm_config_1 = require("@subsquid/typeorm-config");
const dotenv = __importStar(require("dotenv"));
// @ts-ignore
const pgtools = require("pgtools");
class CreateDb extends core_1.Command {
    async run() {
        dotenv.config();
        let cfg = (0, typeorm_config_1.createConnectionOptions)();
        try {
            await pgtools.createdb({
                host: cfg.host,
                port: cfg.port,
                user: cfg.username,
                password: cfg.password,
            }, cfg.database);
        }
        catch (e) {
            if (e?.name === 'duplicate_database') {
                this.log(`Database '${cfg.database}' already exists`);
            }
            else {
                this.error(e);
            }
        }
    }
}
exports.default = CreateDb;
CreateDb.description = 'Create database';
//# sourceMappingURL=create.js.map