"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = void 0;
const fetch = __importStar(require("node-fetch"));
const chalk_1 = __importDefault(require("chalk"));
const debug = process.env.API_DEBUG === 'true';
async function request(apiUrl, fetchContext) {
    const { headers, body, method } = fetchContext || {};
    if (debug) {
        console.log(chalk_1.default.cyan `[HTTP REQUEST]`, chalk_1.default.dim(method?.toUpperCase()), apiUrl, chalk_1.default.dim(JSON.stringify({ headers })));
        if (body) {
            console.log(chalk_1.default.dim(body));
        }
    }
    const response = await fetch.default(apiUrl, fetchContext);
    const responseBody = await response.clone().json();
    if (debug) {
        console.log(chalk_1.default.cyan `[HTTP RESPONSE]`, apiUrl, chalk_1.default.cyan(response.status), chalk_1.default.dim(JSON.stringify({ headers: response.headers })));
        if (body) {
            console.log(chalk_1.default.dim(JSON.stringify(responseBody, null, 2)));
        }
    }
    if (response.status === 401) {
        throw new Error(`Authentication failure. Please obtain a new deployment key at https://app.subsquid.io and follow the instructions`);
    }
    else if (response.status === 400 && responseBody.errors.length === 0) {
        throw new Error(responseBody.message);
    }
    else if (response.status === 400 && responseBody.errors.length !== 0) {
        let validationErrorString = 'An error occurred processing the request:\n';
        for (const error of responseBody.errors) {
            for (const constraint of Object.values(error.constraints)) {
                validationErrorString += `${constraint}\n`;
            }
        }
        throw new Error(validationErrorString);
    }
    else if (response.status === 200) {
        return response;
    }
    else {
        throw new Error(`Squid server error. Please come back later. If the error persists please open an issue at https://github.com/subsquid/squid and report to t.me/HydraDevs`);
    }
}
exports.request = request;
//# sourceMappingURL=request.js.map