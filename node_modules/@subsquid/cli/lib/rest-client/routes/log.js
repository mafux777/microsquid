"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = void 0;
const baseUrl_1 = require("../baseUrl");
const creds_1 = require("../../creds");
const query_string_1 = __importDefault(require("query-string"));
const fetch = __importStar(require("node-fetch"));
async function log(squidName, versionName, follow, lines) {
    const apiUrl = `${baseUrl_1.baseUrl}/client/squid/${squidName}/logs`;
    const params = query_string_1.default.stringify({
        name: versionName,
        follow,
        lines,
    });
    // using not wrapped fetch fro better streaming (.clone in wrap breaks body stream)
    const response = await fetch.default(`${apiUrl}?${params}`, {
        method: 'get',
        headers: {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            'Content-Type': 'application/json',
            authorization: `token ${(0, creds_1.getCreds)()}`,
        },
    });
    response.body.on('data', (data) => {
        const dataString = data.toString();
        if (dataString.length > 0) {
            process.stdout.write(dataString);
        }
    });
}
exports.log = log;
//# sourceMappingURL=log.js.map