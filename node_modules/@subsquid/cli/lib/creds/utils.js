"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMe = exports.deleteCreds = exports.getCreds = exports.setCreds = void 0;
const fs_1 = require("fs");
const node_fetch_1 = __importDefault(require("node-fetch"));
const config_1 = require("../config");
function setCreds(creds) {
    (0, config_1.normalizeDefaults)();
    const config = JSON.parse((0, fs_1.readFileSync)(config_1.configFilePath, 'utf8'));
    config.credentials = creds;
    (0, fs_1.writeFileSync)(config_1.configFilePath, JSON.stringify(config), {
        flag: 'w',
        encoding: 'utf8',
    });
}
exports.setCreds = setCreds;
function getCreds() {
    (0, config_1.normalizeDefaults)();
    let config;
    try {
        const rawConfig = (0, fs_1.readFileSync)(config_1.configFilePath, 'utf8');
        config = JSON.parse(rawConfig);
    }
    catch (e) {
        throw new Error(`Deployment key not found. Please obtain a new deployment key at https://app.subsquid.io`);
    }
    return config.credentials;
}
exports.getCreds = getCreds;
function deleteCreds() {
    try {
        setCreds('empty');
    }
    catch (e) {
        throw new Error(`Deployment key not found. Please obtain a new deployment key at https://app.subsquid.io`);
    }
}
exports.deleteCreds = deleteCreds;
async function getMe() {
    const result = await (0, node_fetch_1.default)('https://api.github.com/user', {
        headers: {
            authorization: `token ${getCreds()}`,
        },
    });
    return result.json();
}
exports.getMe = getMe;
//# sourceMappingURL=utils.js.map