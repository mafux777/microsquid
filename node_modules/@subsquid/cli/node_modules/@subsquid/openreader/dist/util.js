"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.invalidFormat = exports.toInt = exports.unsupportedCase = exports.ensureArray = exports.toTable = exports.toFkColumn = exports.toColumn = exports.toQueryListField = void 0;
const util_1 = require("@subsquid/util");
const assert_1 = __importDefault(require("assert"));
function toQueryListField(entityName) {
    return (0, util_1.toPlural)((0, util_1.toCamelCase)(entityName));
}
exports.toQueryListField = toQueryListField;
function toColumn(gqlFieldName) {
    return (0, util_1.toSnakeCase)(gqlFieldName);
}
exports.toColumn = toColumn;
function toFkColumn(gqlFieldName) {
    return (0, util_1.toSnakeCase)(gqlFieldName) + '_id';
}
exports.toFkColumn = toFkColumn;
function toTable(entityName) {
    return (0, util_1.toSnakeCase)(entityName);
}
exports.toTable = toTable;
function ensureArray(item) {
    return Array.isArray(item) ? item : [item];
}
exports.ensureArray = ensureArray;
function unsupportedCase(value) {
    return new Error(`Unsupported case: ${value}`);
}
exports.unsupportedCase = unsupportedCase;
function toInt(val) {
    let i = parseInt(val);
    (0, assert_1.default)(!isNaN(i) && isFinite(i));
    return i;
}
exports.toInt = toInt;
function invalidFormat(type, value) {
    return new TypeError(`Not a ${type}: ${value}`);
}
exports.invalidFormat = invalidFormat;
//# sourceMappingURL=util.js.map